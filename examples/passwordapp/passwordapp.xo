# Passwordapp
#
# This is a passwordapp demo, work in progress!
# This app demonstrates (as an ongoing demo) how
# to create basic apps for phones.

>> gui := Gui new.
gui use: Path guihelpers.

# ID Generators
>> ROOT       := ID-Generator new init: 1.
>> ID         := None.
>> sub        := None.

# Images
>> top        := Image new: ['topbar.png'].
>> offline    := Image new: ['connection1.png'].
>> background := Image new: ['bg.png'].

# Colors
>> white      := Color new red: 255 green: 255 blue: 255.
>> gray       := Color new red: 50  green: 50  blue: 50.
>> black      := Color new red: 0   green: 0   blue: 0.

# Fonts
>> icons      := Font new source: ['remixicon.ttf'] size: 40.
>> icons-xs   := Font new source: ['remixicon.ttf'] size: 20.
>> roboto     := Font new source: ['roboto.ttf'] size: 40.
>> roboto-xs  := Font new source: ['roboto.ttf'] size: 20.

View on: ['H1:'] do: { :title
	self 
		label
		color: white,
		font: roboto,
		text: title,
		margin-bottom: 20,
		close.
}.

View on: ['label:'] do: { :name
	self
		label
		color: white,
		font: roboto-xs,
		text: name,
		close.
}.

View on: ['input:value:'] do: { :id :value

	self
		textarea
		id: id,
		selectable: True,
		events: True,
		one-line: True,
		font: ['font0'],
		width: ['100%'],
		color: black,
		text: value,
		close.
}.

View on: ['password:value:masked:'] do: { :id :value :masked

	self
		textarea
		id: id,
		selectable: True,
		events: True,
		one-line: True,
		font: ['font0'],
		width: ['100%'],
		color: black,
		text: value,
		password: masked,
		close.
}.

View on: ['hidden:value:'] do: { :id :value

	self
		textarea
		id: id,
		selectable: True,
		events: True,
		one-line: True,
		font: ['font0'],
		width: ['100%'],
		color: black,
		text: value,
		hidden: True,
		close.
}.

View on: ['button:icon:'] do: { :id :icon

	self
		button
		events: True,
		id: id,
		width:40,
		height:40,
		padding:10,
		background-color:black,
		shadow: 0,
		elements
			label
			font: icons-xs,
			text: icon,
			close
		close.
}.

>> Server := Object new.

Server on: ['new:'] do: { :url <- self new init: url. }.

Server on: ['init:'] do: { :url
	own url := url.
	own token := None.
}.

Server on: ['command:payload:'] do: { :command :payload
	>> end-point := own url + ['/?com='] + command.
	>> json      := JSON jsonify: payload.
	>> json-response := Network send: json to: end-point.
	>> response  := JSON object: json-response. 
	<- response.
}.

Server on: ['command:'] do: { :command
	>> end-point := own url + ['/?com='] + command.
	>> json      := JSON jsonify: (Dict new token: own token).
	>> json-response := Network send: json to: end-point.
	>> response  := JSON object: json-response. 
	<- response.
}.

Server on: ['login:'] do: { :pin
	>> response :=  self command: ['signin'] payload: (
		Dict new
		pcode: pin
	).
	response ok true: {
		own token := response token.
	}.
	<- response ok.
}.

Server on: ['passwords'] do: {
	>> response      := self command: ['list'].
	<- response passwords.
}.

Server on: ['add:password:'] do: { :label :password
	>> post := 
		Dict new
		token: own token,
		label: label,
		passw: password.
	>> response := self command: ['add'] payload: post. 
	<- response ok.
}.

Server on: ['delete:'] do: { :label
	>> post :=
		Dict new
		token: own token,
		label: label.
	>> response := self command: ['del'] payload: post. 
	<- response ok.
}.

>> FakeServer := Server new: ['http://localhost:8001'].

FakeServer on: ['init:'] do: { :url
	self init: url.
	own passwords :=
		Dict new
			ftp: ['psst!'],
			email: ['aaaa'],
			admin: ['xxxx'].
}. 

FakeServer on: ['command:payload:'] do: { :command :payload
	>> response := Dict new ok: 0.
	command
	case: ['signin'] do: {
		response ok: (( payload pcode = ['0000'] ) either: 1 or: 0). 
	},
	case: ['add'] do: {
		own passwords put: ( payload passw ) at: ( payload label ).
		response ok: 1.
	},
	case: ['del'] do: {
		own passwords - ( payload label ).
		response ok: 1.
	}.
	<- response.
}.

FakeServer on: ['command:'] do: { :command
	>> response := Dict new ok: 1.
	command
	case: ['list'] do: {
		response
			passwords: own passwords.
	}.
	<- response.
}.

>> server := Server new: ['http://localhost:8000'].
>> app := Object new.

app on: ['init-screen'] do: {


	>> view := View new.

	view
		component
		elements
			view
			id: ROOT NODE,
			font: roboto,
			extends: ['object'],
			events: True,
			width: ['100%'],
			height: ['100%'],
			scrollable: False,
			background: background,
			padding:0,
			border: 0
			elements
			close
		close
	close.

	gui on: ['start'] do: { app pinscreen. },
	width: 400 height: 800,
	screen: view string.
}.

app on: ['pinscreen'] do: {

	>> mask := [''].
	{ mask append: ['*']. } * own pincode length.	
	>> view := View new.
	
	ID := ID-Generator new init: ROOT NODE + 1.

	view
		component
		elements
			view
			font: roboto,
			extends: ['object'],
			events: True,
			width: ['100%'],
			height: ['100%'],
			scrollable: False,
			padding:0,
			border: 0,
			elements
				object
				scrollable: False,
				events: True,
				width: ['100%'],
				height: ['100%'],
				padding:0,
				border-color: black,
				radius: 0,
				background: background,
				
				layout: ['flex'],
				flex-flow: ['column'],
				elements
					
					# top bar
					object
					events: True,
					scrollable: False,
					width: 400,
					height: ['10%'],
					flex-align: ['top'],
					border: 0,
					radius:0,
					outline: 0,
					shadow: 0,
					layout: ['flex'],
					flex-flow: ['row'],
					background: top,
					close
					
					# ~ Pin code ~
					object
					margin-padding-border: 0,
					width: ['100%'],
					bg-opa:0,
					layout: ['flex'],
					flex-flow: ['column'],
					elements
						label
						width: 360,
						height: 100,
						color: white,
						bg-opa: 255,
						background-color: black,
						margin-top: 20,
						margin-left: 20,
						padding: 30,
						text-align: ['center'],
						border: 1,
						text: mask,
						close
					close
					
					buttonmatrix
					id: ID buttons,
					events: True,
					width: ['100%'],
					height: ['400'],
					bg-opa: 0,
					border: 0,
					map: ['\'1\' \'2\' \'3\' \'\\n\' \'4\' \'5\' \'6\' \'\\n\' \'7\' \'8\' \'9\' \'\\n\' \'0\' \'OK\' \'DEL\''],
					close
				close
			close
		close.
		
	gui on: ['click:'] do: { :id
		(id = ID buttons) true: {
			app pin-key: ( gui field-value: id ).
		}.
	}.
	
	gui xml: view string name: ['updated-pin'] at: ROOT NODE.
}.

app on: ['mainscreen'] do: {

	ID  := ID-Generator new init: ROOT NODE + 1.
	sub := ID-Generator new.

	>> view := View new
	component
	elements
		view
		extends: ['object'],
		events: True,
		width: ['100%'],
		height: ['100%'],
		scrollable: False,
		padding: 0,
		border: 0,
		elements
			object
			scrollable: False,
			events: True,
			width: ['100%'],
			height: ['100%'],
			padding:0,
			border-color: black,
			radius: 0,
			background: background,
			layout: ['flex'],
			flex-flow: ['column'],
			elements
				# top bar
				object
				events: True,
				scrollable: False,
				width: 400,
				height: ['10%'],
				flex-align: ['top'],
				border: 0,
				radius:0,
				outline: 0,
				shadow: 0,
				layout: ['flex'],
				flex-flow: ['row'],
				background: top,
				close
				
				# tab view
				tabview
				events: True,
				tab-bar-position: ['bottom'],
				width: 400,
				height: ['90%'],
				layout: ['flex'],
				flex-flow: ['column'],
				bg-opa:0, # keep the background transparent
				elements
					# tabs - each tab contains its own content
					# ~ Password List  ~
					tabview-tab
					events: True,
					font: icons,
					text: ['&#61039;'],
					elements # content goes here
						object
						events: True,
						width: ['100%'],
						height: ['100%'],
						layout: ['flex'],
						flex-flow: ['column'],
						flex-align: ['top'],
						bg-opa:0,
						border:0,
						elements.
						
						ID passwords: 20.
						>> index := 0.
						
						own data passwords each: { :name :password
							
							view
							label: name,
							hidden: ID passwords + sub label + index value: name,
							password: ID passwords + sub password + index value: password masked: (own reveal !=: name),
							
							object
								events: True,
								width: ['100%'],
								height: 80,
								layout: ['flex'],
								flex-flow: ['row'],
								flex-align: ['left'],
								bg-opa:0,
								border:0,
								padding: 0,
								elements
									button: ID passwords + sub reveal-button + index icon: (
										(own reveal !=: name) either: ['&#60596;'] or: ['&#60598;']
									),
									button: ID passwords + sub copy-button   + index icon: ['&#60626;'],
									button: ID passwords + sub delete-button + index icon: ['&#60451;'],
								close.
								index add: 5.
						}.
						
						ID end-of-passwords: ID passwords + index copy.
						
						view	
						close
					close
					
					# ~ Add password ~
					tabview-tab 
					events: True,
					font: icons,
					text: ['&#59923;'],
					elements
						object
						events: True,
						width: ['100%'],
						height: ['100%'],
						layout: ['flex'],
						flex-flow: ['column'],
						flex-align: ['top'],
						bg-opa:0,
						border:0,
						elements
							H1:       ['Add Password'],
							label:    ['Label'],
							input:    ID new-password-label value: [''],
							label:    ['Password'],
							password: ID new-password-password value: [''] masked: True,
							button:   ID new-password-save-button icon: ['&#61617;'],
						close
					close

					# ~ Connection status ~
					tabview-tab
					events: True,
					font: icons,
					text: ['&#61898;'],
					
					elements
						object
						width: ['100%'],
						height: ['100%'],
						layout: ['flex'],
						flex-flow: ['column'],
						flex-align: ['top'],
						border: 0,
						bg-opa:0,
						elements
							H1: ['Connection'],
							label: ['Connected to: '] + ( own fake bool either: ['fake server'] or: own url ),
							image src: offline,
							close
						close
					close

					# ~ Settings ~
					tabview-tab
					events: True,
					font: icons,
					text: ['&#61673;'],
					
					elements
						object
						events: True,
						width: ['100%'],
						height: ['100%'],
						layout: ['flex'],
						flex-flow: ['column'],
						flex-align: ['top'],
						bg-opa:0,
						border:0,
						elements
							H1: ['Settings'],
							label: ['Server (only https allowed)'],
							input: ID url-field value: own url,
							label: ['Master password'],
							password: ID master-pass value: own masterkey masked: True,
							label: ['Use fake demo server'],
							switch
							id: ID fake,
							checked: True,
							background-color: black,
							close
							button: ID save-settings icon: ['&#61617;'],
						close
					close
					
					# tabs at the bottom
					tabview-tab-bar
					events: True,
					font: icons,
					background-color: black,
					height: 80,
					color: white,
					close
				close
			close
		close
	close.


	Out write: view string, stop.
	gui xml: view string name: ['main'] at: ROOT NODE.
	gui on: ['click:'] do: { :id
		{
			( id = ID new-password-save-button ) true: {
				>> response := server
				add: ( gui field-value: ID new-password-label ) 
				password: ( gui field-value: ID new-password-field ).
				response ok true: {
					gui show: ['password saved.'].
				}, else: {
					gui show: ['unable to save password.'].
				}.
				app mainscreen.
			}, break.
			
			( id = ID save-settings ) true: {
				app save-settings.
			}, break.
			
			((id >=: ID passwords) and: (id < ID end-of-passwords)) true: {
			
				>> label := gui field-value: (sub closest: sub label for: id).
				>> passw := gui field-value: (sub closest: sub password for: id).
				>> btn   := id - ID passwords % sub range.
				
				(btn = sub reveal-button) true: {
					app reveal: label.
					app mainscreen.
				}.
				
				(btn = sub copy-button) true: {
					gui
					clipboard: passw,
					show: ['password copied to clipboard.'].
				}.
				
				(btn = sub delete-button) true: {
					gui
					confirm: (
						['do you really want to delete <passw> ?']
						<passw>: label
					)
					do: ({ 
						>> label := own label.
						server delete: label, true: {
							gui show: ['password deleted.'].
							app mainscreen.
						}, else: {
							gui show: ['could not delete password.'].
						}.
					} set: ['label'] value: label).
				}.
			}.
		} procedure.
	}. 
}.

app on: ['reveal:'] do: { :label
	own reveal := (own reveal = label) either: None or: label.
}.

app on: ['pin-key:'] do: { :digit

	(digit = ['DEL']) true: {
		own pincode := [''].
		app pinscreen.
	}.
	(digit = ['OK']) true: {
		>> response := server login: own pincode.
		response ok true: {
			gui show: ['unlocked'].
			own data passwords: server passwords.
			self mainscreen.
		}, else: {
			gui show: ['wrong pin'].
			own pincode := [''].
			app pinscreen.
		}.
	}.

	((['0123456789'] find: digit) None?) false: {
		own pincode append: digit.
		app pinscreen.
	}.
}.

app on: ['save-settings'] do: {

	own vault
	set: ['passwordapp-url'] password: (
		gui field-value:
		ID url-field
	),
	set: ['passwordapp-masterkey'] password: (
		gui field-value:
		ID masterkey
	),
	set: ['passwordapp-fake'] password: (
		gui field-value:
		ID fake
	).

	gui show: ['saved'].
	app load-settings pinscreen.
	
}.

app on: ['load-settings'] do: {

	own fake      := own vault get: ['passwordapp-fake'].
	own fake None? true: { own fake := True. }.
	own url       := own vault get: ['passwordapp-url'].
	own masterkey := own vault get: ['passwordapp-masterkey'].

	own fake true: {
		server := FakeServer new: [''].
		gui show: ['No server configured, using fake data. Fake pin is 0000.'].
	}, else: {
		server := Server new: url.
	}.

}.

app on: ['init'] do: {

	own vault := Vault new: ['xo-passwordapp'].
	own reveal := None.
	own pincode := [''].
	own data := Dict new.
	app load-settings.

}.

app init init-screen.