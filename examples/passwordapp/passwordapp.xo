# Passwordapp
#
# This is a passwordapp demo, work in progress!
# This app demonstrates (as an ongoing demo) how
# to create basic apps for phones.

>> gui := Gui new.
gui use: Path guihelpers.

# Resources

>> ROOT       := ID-Generator new init: 1.
>> ID         := None.
>> sub        := None.

>> top        := Image new: ['topbar.png'].
>> connection := Image new: ['connection.png'].
>> background := Image new: ['bg.png'].

>> white      := Color new red: 255 green: 255 blue: 255.
>> gray       := Color new red: 50  green: 50  blue: 50.
>> black      := Color new red: 0   green: 0   blue: 0.

>> icons      := Font new source: ['remixicon.ttf'] size: 40.
>> icons-xs   := Font new source: ['remixicon.ttf'] size: 20.
>> roboto     := Font new source: ['roboto.ttf'] size: 40.
>> roboto-xs  := Font new source: ['roboto.ttf'] size: 20.

# Styles: Reusable View Parts

View on: ['open-label:font:'] do: { :label :font
	
	self 
		label
		color: white,
		font: font,
		text: label.
}.

View on: ['H1:'] do: { :title
	
	self
		open-label: title font: roboto,
		margin-bottom: 20,
		close.
}.

View on: ['label:'] do: { :name
	
	self 
		open-label: name font: roboto-xs, 
		close.
}.

View on: ['open-textarea:value:'] do: { :id :value

	self
		textarea
		id: id,
		selectable: True,
		events: True,
		one-line: True,
		font: ['font0'],
		width: ['100%'],
		color: black,
		text: value.
}.

View on: ['input:value:'] do: { :id :value

	self
		open-textarea: id value: value,
		close.
}.

View on: ['password:value:masked:'] do: { :id :value :masked

	self
		open-textarea: id value: value,
		password: masked,
		close.
}.

View on: ['hidden:value:'] do: { :id :value

	self
		open-textarea: id value: value,
		hidden: True,
		close.
}.

View on: ['button:icon:'] do: { :id :icon

	self
		button
		events: True,
		id: id,
		width:40,
		height:40,
		padding:10,
		background-color:black,
		shadow: 0,
		elements
			label
			font: icons-xs,
			text: icon,
			close
		close.
}.

View on: ['topbar'] do: {

	self
		object 
		events: True,
		scrollable: False,
		width: 400,
		height: ['10%'],
		flex-align: ['top'],
		border: 0,
		radius:0,
		outline: 0,
		shadow: 0,
		flex: ['row'],
		background: top,
		close.
}.

View on: ['list-item:password:'] do: { :name :password


	self
		object
		id: ID passwords + sub container + index,
		events: True,
		width: ['100%'],
		height: 180,
		bg-opa: 0,
		border: 0,
		flex: ['column'],
		flex-align: ['top'],
		margin:0,
		padding:0,
		elements
			label: name,
			hidden: ID passwords + sub label + index value: name,
			password: ID passwords + sub password + index
				value:  ( password None? either: ['***'] or: password )
				masked: password None?,
			object
			events: True,
			width: ['100%'],
			height: 80,
			flex: ['row'],
			flex-align: ['left'],
			bg-opa:0,
			border:0,
			padding: 0,
			elements.
			
			# We need to generate IDs first,
			# otherwise one of them will be lost below.
			
			sub reveal-button.
			sub hide-button.
			
			password None?
			true: {
				self 
					button: ID passwords + sub reveal-button + index
					icon: ['&#60596;'].
			}, else: {
				self 
					button: ID passwords + sub hide-button + index
					icon: ['&#60598;'].
			}.
			
			self
			button: ID passwords + sub copy-button   + index icon: ['&#60626;'],
			button: ID passwords + sub delete-button + index icon: ['&#60451;'],
			close
		close.
}.

# Backend objects (Server)

>> Server := Object new.

Server on: ['new:'] do: { :url <- self new init: url. }.

Server on: ['init:'] do: { :url
	
	own url := url.
	own token := None.
}.

Server on: ['command:payload:'] do: { :command :payload
	
	>> end-point := own url + ['/?com='] + command.
	>> json      := JSON jsonify: payload.
	>> json-response := Network send: json to: end-point.
	>> response  := JSON object: json-response. 
	<- response.
}.

Server on: ['command:'] do: { :command
	
	>> end-point := own url + ['/?com='] + command.
	>> json      := JSON jsonify: (Dict new token: own token).
	>> json-response := Network send: json to: end-point.
	>> response  := JSON object: json-response. 
	<- response.
}.

Server on: ['login:'] do: { :pin
	
	>> response :=  self command: ['signin'] payload: (
		Dict new
		pcode: pin
	).
	
	response ok true: {
		own token := response token.
	}.
	
	<- response ok.
}.

Server on: ['passwords'] do: {
	
	>> response      := self command: ['list'].
	<- response passwords.
}.

Server on: ['add:password:'] do: { :label :password
	
	>> post := 
		Dict new
		token: own token,
		label: label,
		passw: password.
	>> response := self command: ['add'] payload: post. 
	<- response ok.
}.

Server on: ['delete:'] do: { :label
	
	>> post :=
		Dict new
		token: own token,
		label: label.
	>> response := self command: ['del'] payload: post. 
	<- response ok.
}.

>> FakeServer := Server new: ['http://localhost:8001'].

FakeServer on: ['init:'] do: { :url
	self init: url.
	>> encrypted := app encrypt: ['demo'].
	own passwords :=
		Dict new
			ftp:   encrypted,
			email: encrypted,
			admin: encrypted,
			test:  encrypted.
}. 

FakeServer on: ['command:payload:'] do: { :command :payload
	
	>> response := Dict new ok: 0.
	
	command
	case: ['signin'] do: {
		response ok: (( payload pcode = ['0000'] ) either: 1 or: 0). 
	},
	case: ['add'] do: {
		own passwords put: payload passw at: payload label.
		response ok: 1.
	},
	case: ['del'] do: {
		own passwords - ( payload label ).
		response ok: 1.
	}.

	<- response.
}.

FakeServer on: ['command:'] do: { :command
	
	>> response := Dict new ok: 1.

	command
	case: ['list'] do: {
		response
			passwords: own passwords.
	}.

	<- response.
}.

>> server := Server new: ['http://localhost:8000'].

# App Controller

>> app := Object new.

app on: ['add:password:'] do: { :label :password
	
	>> encrypted := self encrypt: password.
	
	server
		add: label password: encrypted,
		ok true: {
			gui show: ['password saved.'].
			app mainscreen.
		}, else: {
			gui show: ['unable to save password.'].
		}.
	

}.

app on: ['confirm-delete:'] do: { :label

	gui confirm: (
		['do you really want to delete <passw> ?']
		<passw>: label
	)
	do: ({ app delete: own label. } set: ['label'] value: label).
			
}.

app on: ['delete:'] do: { :label

	server delete: label, true: {
		gui show: ['password deleted.'].
		app mainscreen.
	}, else: {
		gui show: ['could not delete password.'].
	}.

}.

app on: ['copy-to-clipboard:'] do: { :passw
	
	gui clipboard: ( 
		self decrypt: ( own data passwords ? label )
	), show: ['copied!'].

}.

app on: ['toggle:index:'] do: { :password :index
	
	>> view := View new
	component
	elements
		view
		extends: ['object'],
		events: True,
		width: ['100%'],
		height: 180,
		scrollable: False,
		flex: ['row'],
		flex-align: ['top'],
		padding: 0,
		border: 0,
		bg-opa: 0,
		elements
			list-item: label password: password,
		close
	close.
	<- view.

}.

app on: ['reveal:in:index:'] do: { :label :div :index

	>> password   := self decrypt: own data passwords ? label.
	>> view       := self toggle: password index: index.
	
	gui xml: view string name: ['password-item'] at: div.
	
}.

app on: ['hide:in:index:'] do: { :label :div :index

	>> view := self toggle: None index: index.

	gui xml: view string name: ['password-item'] at: div.

}.

app on: ['load-settings'] do: {

	own fake      := True.
	own url       := [''].
	own masterkey := [''].

	>> jdata      := own vault get: ['settings'].

	jdata None? false: {
		>> config     := JSON object: jdata.
		own fake      := config fake bool.
		own url       := config url string.
		own masterkey := config masterkey string.
	}.

	own fake true: {
		own masterkey := ['test123'].
		server := FakeServer new: [''].
		gui show: ['No server configured, using fake data. Fake pin is 0000.'].
	}, else: {
		server := Server new: url.
	}.
}.

app on: ['save-settings'] do: {

	own fake      := gui field-value: ID fake.
	own url       := gui field-value: ID url-field.
	own masterkey := gui field-value: ID masterkey.
	
	>> jdata := Dict new
		fake:      own fake string,
		url:       own url string, 
		masterkey: own masterkey string.

	own vault 
		set: ['settings']
		password: (JSON jsonify: jdata).

	gui show: ['saved'].
	app load-settings pinscreen.	
}.

app on: ['pin-key:'] do: { :digit

	(digit = ['DEL']) true: {
		own pincode := [''].
		app pinscreen.
	}.
	(digit = ['OK']) true: {
		>> response := server login: own pincode.
		response ok true: {
			gui show: ['unlocked'].
			own data passwords: server passwords.
			self mainscreen.
		}, else: {
			gui show: ['wrong pin'].
			own pincode := [''].
			app pinscreen.
		}.
	}.

	((['0123456789'] find: digit) None?) false: {
		own pincode append: digit.
		app pinscreen.
	}.
}.

app on: ['decrypt:'] do: { :password
	<- own vault decrypt: password key: own masterkey.
}.

app on: ['encrypt:'] do: { :password
	<- own vault encrypt: password key: own masterkey.
}.

app on: ['init'] do: {
	own vault := Vault new: ['xo-passwordapp'].
	own reveal := None.
	own pincode := [''].
	own data := Dict new.
	app load-settings.
}.

# Screens

app on: ['init-screen'] do: {

	>> view := View new.

	view
		component
		elements
			view
			id: ROOT NODE,
			font: roboto,
			extends: ['object'],
			events: True,
			width-height: ['100%'],
			scrollable: False,
			background: background,
			padding:0,
			border: 0
			elements
			close
		close
	close.

	gui on: ['start'] do: { app pinscreen. },
	width: 400 height: 800,
	screen: view string.
}.

app on: ['pinscreen'] do: {

	>> mask := [''].
	{ mask append: ['*']. } * own pincode length.	
	>> view := View new.
	
	ID := ID-Generator new init: ROOT NODE + 1.

	view
		component
		elements
			view
			font: roboto,
			extends: ['object'],
			events: True,
			width-height: ['100%'],
			scrollable: False,
			padding:0,
			border: 0,
			elements
				object
				scrollable: False,
				events: True,
				width-height: ['100%'],
				padding:0,
				border-color: black,
				radius: 0,
				background: background,
				flex: ['column'],
				elements
					topbar
					object # Pin code display
					margin-padding-border: 0,
					width: ['100%'],
					bg-opa:0,
					layout: ['flex'],
					flex-flow: ['column'],
					elements
						label
						width: 360,
						height: 100,
						color: white,
						bg-opa: 255,
						background-color: black,
						margin-top: 20,
						margin-left: 20,
						padding: 30,
						text-align: ['center'],
						border: 1,
						text: mask,
						close
					close
					buttonmatrix
					id: ID buttons,
					events: True,
					width: ['100%'],
					height: ['400'],
					bg-opa: 0,
					border: 0,
					map: ['\'1\' \'2\' \'3\' \'\\n\' \'4\' \'5\' \'6\' \'\\n\' \'7\' \'8\' \'9\' \'\\n\' \'0\' \'OK\' \'DEL\''],
					close
				close
			close
		close.
		
	gui on: ['click:'] do: { :id
		(id = ID buttons) true: {
			app pin-key: ( gui field-value: id ).
		}.
	}.
	
	gui xml: view string name: ['updated-pin'] at: ROOT NODE.
}.

app on: ['mainscreen'] do: {

	ID  := ID-Generator new init: ROOT NODE + 1.
	sub := ID-Generator new.

	>> view := View new
	component
	elements
		view
		extends: ['object'],
		events: True,
		width-height: ['100%'],
		scrollable: False,
		padding: 0,
		border: 0,
		elements
			object
			scrollable: False,
			events: True,
			width: ['100%'],
			height: ['100%'],
			padding:0,
			border-color: black,
			radius: 0,
			background: background,
			flex: ['column'],
			elements
				topbar
				tabview
				events: True,
				tab-bar-position: ['bottom'],
				width: 400,
				height: ['90%'],
				flex: ['column'],
				bg-opa:0,
				elements

					tabview-tab # Password List
					events: True,
					font: icons,
					text: ['&#61039;'],
					elements
						object
						events: True,
						width-height: ['100%'],
						flex: ['column'],
						flex-align: ['top'],
						bg-opa:0,
						border:0,
						elements.
						>> index := 0.
						own data passwords each: { :name :password
							view
							list-item: name password: None.
							index add: sub range.
						}.
						ID end-of-passwords: ID passwords + index copy.
						view	
						close
					close
					
					tabview-tab # Add password 
					events: True,
					font: icons,
					text: ['&#59923;'],
					elements
						object
						events: True,
						width-height: ['100%'],
						flex: ['column'],
						flex-align: ['top'],
						bg-opa:0,
						border:0,
						elements
							H1:       ['Add Password'],
							label:    ['Label'],
							input:    ID new-label value: [''],
							label:    ['Password'],
							password: ID new-pass value: [''] masked: True,
							button:   ID save-pass icon: ['&#61617;'],
						close
					close

					tabview-tab # Connection status
					events: True,
					font: icons,
					text: ['&#61898;'],
					elements
						object
						width-height: ['100%'],
						flex: ['column'],
						flex-align: ['top'],
						border: 0,
						bg-opa:0,
						elements
							H1:        ['Connection'],
							label:     ['Connected to: '] + ( own fake bool 
								either: ['fake server'] or: own url ),
							image src: connection,
							close
						close
					close

					tabview-tab # Settings
					events: True,
					font: icons,
					text: ['&#61673;'],
					elements
						object
						events: True,
						width-height: ['100%'],
						flex: ['column'],
						flex-align: ['top'],
						bg-opa:0,
						border:0,
						elements
							H1: ['Settings'],
							label: ['Server (only https allowed)'],
							input: ID url-field value: own url,
							label: ['Master password'],
							password: ID masterkey value: own masterkey masked: True,
							label: ['Use fake demo server'],
							switch
							id: ID fake,
							checked: True,
							background-color: black,
							close
							button: ID save-settings icon: ['&#61617;'],
						close
					close
					
					tabview-tab-bar # Tabs at the bottom
					events: True,
					font: icons,
					background-color: black,
					height: 80,
					color: white,
					close
				close
			close
		close
	close.

	gui xml: view string name: ['main'] at: ROOT NODE.
	
	gui on: ['click:'] do: { :id
		{
			# user clicked on save passw button
			( id = ID save-pass ) true: {
				>> new-label := gui field-value: ID new-label.
				>> new-passw := gui field-value: ID new-pass.
				app add: new-label password: new-passw.
			}, break.
			
			# user clicked on save settings button
			( id = ID save-settings ) true: { 
				app save-settings.
			}, break.
			
			# user clicked on button below password in list
			((id >=: ID passwords) and: (id < ID end-of-passwords))
			true: {
			
				>> label-id := sub base: ID passwords id: id find: sub label.
				>> div-id   := sub base: ID passwords id: id find: sub container.
				>> btn      := sub base: ID passwords id: id.
				>> index    := sub base: ID passwords index: id. # to keep IDS in sync!
				>> label    := gui field-value: label-id.
				
				(btn = sub reveal-button) true: { app reveal: label in: div-id index: index. }.
				(btn = sub hide-button)   true: { app hide: label in: div-id index: index. }.
				(btn = sub copy-button)   true: { app copy-to-clipboard: label. }.
				(btn = sub delete-button) true: { app confirm-delete: label.}.
	
			}, break.
			
		} procedure.
	}. 
}.

app init init-screen.