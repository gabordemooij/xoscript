# Compiler
CC := emcc

# Directories
SRC_DIR    := src
BUILD_DIR  := build/Web/obj
BIN_DIR    := build/Web/bin

# Find all C source files recursively under src/
CSRCS := $(filter-out $(SRC_DIR)/plugins/gui/monocypher/src/optional/monocypher-ed25519.c $(SRC_DIR)/plugins/gui/fficonnect.c, $(shell find $(SRC_DIR) -name '*.c'))

# Convert src/*.c to build/Web/obj/*.o preserving path
COBJS := $(patsubst $(SRC_DIR)/%.c, $(BUILD_DIR)/%.o, $(CSRCS))

# Include directories
INCLUDES := \
	-I$(SRC_DIR) \
	-I$(SRC_DIR)/i18n/en \
	-I$(SRC_DIR)/plugins/gui \
	-I$(SRC_DIR)/plugins/gui/i18n/en \
	-I$(SRC_DIR)/plugins/gui/lvgl_static/src \
	-I$(SRC_DIR)/plugins/gui/lvgl_static/src/drivers/sdl

# Compiler flags
CFLAGS := -O2 -rdynamic -lm -ldl -mtune=native -Wall $(INCLUDES) \
	-sEXIT_RUNTIME=1 \
	-D PATH_MAX=1024 \
	-fPIC \
	-D CTRLANG=en \
	-D INCLUDETESTS \
	-lidbfs.js \
	-sUSE_SDL=2 \
	-sUSE_SDL_IMAGE=2 \
	-sUSE_SDL_TTF=2 \
	-sUSE_SDL_MIXER=2 \
	-sSDL2_IMAGE_FORMATS='["png","jpg"]' \
	-sSDL2_MIXER_FORMATS='["ogg","mp3"]' \
	-sALLOW_MEMORY_GROWTH \
	-sASYNCIFY \
	-sASYNCIFY_IMPORTS=['emscripten_sleep'] \
	-sASYNCIFY_STACK_SIZE=65536 \
	-sEXPORTED_RUNTIME_METHODS=['callMain'] \
	-sEXPORT_ALL=1 \
	-sMAIN_MODULE=1 \
	--preload-file=misc/lib/guihelpers@/guihelpers \
	--preload-file=examples/counter/counter.xo@/counter.xo \
	--preload-file=examples/window/window.xo@/window.xo \
	--preload-file=examples/helloworld/helloworld.xo@/helloworld.xo \
	--preload-file=examples/stdout/stdout.xo@/stdout.xo \
	--preload-file=examples/network/network.xo@/network.xo \
	--preload-file=examples/encrypt/encrypt.xo@/encrypt.xo \
	--preload-file=examples/js/js.xo@/js.xo \
	--preload-file=examples/assets/assets.xo@/assets.xo \
	--preload-file=examples/assets/beach.png@/beach.png \
	--preload-file=examples/assets/LinLibertine_R.ttf@/LinLibertine_R.ttf \

# Target output
TARGET := $(BIN_DIR)/xo.html

# Default rule
all: $(TARGET)

# Link target from all objects
$(TARGET): $(COBJS)
	@mkdir -p $(BIN_DIR)
	$(CC) $(COBJS) $(CFLAGS) -o $@

# Compile .c -> .o rule preserving directory structure
$(BUILD_DIR)/%.o: $(SRC_DIR)/%.c
	@mkdir -p $(dir $@)
	$(CC) $(CFLAGS) -c $< -o $@

# Clean build outputs
clean:
	rm -rf $(BUILD_DIR) $(BIN_DIR)
